#pragma warning disable IDE0058

namespace AZ.Generator.EntityFrameworkCore.Generators;

[Generator]
public sealed class EntityConfigurationsGenerator : IIncrementalGenerator
{
	private readonly StringBuilder sb = new();

	#region Init

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		context.RegisterPostInitializationOutput(AddAttributes);

		var syntaxProvider = context.SyntaxProvider
			.ForAttributeWithMetadataName($"{Namespaces.Attributes}.{Attributes.EntityConfigurations}", Filter, Transform)
			.Select((tuple, ct) =>
			{
				var parser = new EntityConfigurationsParser();
				var spec = parser.Parse(tuple.Node, tuple.SemanticModel, ct);
				var diagnostics = parser.Diagnostics.ToImmutableEquatableArray();
				return (spec, diagnostics);
			})
			.WithTrackingName(TrackingNames.EntityConfigurations);

		context.RegisterSourceOutput(syntaxProvider, ReportDiagnosticsAndEmit);
	}

	private static bool Filter(SyntaxNode node, CancellationToken _) => node is ClassDeclarationSyntax;
	private static (TypeDeclarationSyntax Node, SemanticModel SemanticModel) Transform(GeneratorAttributeSyntaxContext context, CancellationToken _) =>
		((TypeDeclarationSyntax)context.TargetNode, context.SemanticModel);

	#endregion

	#region Post-init

	private void AddAttributes(IncrementalGeneratorPostInitializationContext context)
	{
		context.AddEmbeddedAttributeDefinition();

		var entityConfigurationsText = SourceText.From(Attributes.EntityConfigurationsDefinition, Encoding.UTF8);
		var entityConfigurationText = SourceText.From(Attributes.EntityConfigurationDefinition, Encoding.UTF8);

		context.AddSource($"{Attributes.EntityConfigurations}.g.cs", entityConfigurationsText);
		context.AddSource($"{Attributes.EntityConfiguration}.g.cs", entityConfigurationText);
	}

	#endregion

	#region Generate

	private void ReportDiagnosticsAndEmit(SourceProductionContext context, (EntityConfigurationsSpec? Spec, ImmutableEquatableArray<Diagnostic> Diagnostics) input)
	{
		var spec = input.Spec;
		var diagnostics = input.Diagnostics;

		foreach (var diagnostic in diagnostics)
		{
			context.ReportDiagnostic(diagnostic);
		}

		if (spec is null)
		{
			return;
		}

		context.CancellationToken.ThrowIfCancellationRequested();

		GenerateConfigurations(in context, spec);
	}

	private void GenerateConfigurations(in SourceProductionContext context, EntityConfigurationsSpec spec)
	{
		var configurationsFileInfo = GenerateConfigurationsFile(in context, spec);

		var configurationsFileFullyQualified = $"global::{configurationsFileInfo.ClassNamespace}.{configurationsFileInfo.ClassName}";

		sb.Clear();

		var dbContextSpec = spec.DbContextSpec;

		var classDeclaration =
			$$"""
			// <auto-generated />
			#nullable enable

			namespace {{dbContextSpec.Namespace}};

			partial class {{dbContextSpec.Name}}
			{
			""";
		sb.AppendLine(classDeclaration);

		sb.AppendLine(GetMethodDeclaration());

		foreach (var propertyName in configurationsFileInfo.PropertyNames)
		{
			var applyConfiguration =
				$$"""
						modelBuilder.ApplyConfiguration({{configurationsFileFullyQualified}}.{{propertyName}});
				""";
			sb.AppendLine(applyConfiguration);
		}

		sb.AppendLine(GetMethodClosure());

		var classClosure =
			"""
			}

			""";
		sb.AppendLine(classClosure);

		var hint = $"{dbContextSpec.Name}EntityConfigurations.g.cs";
		var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);

		context.AddSource(hint, sourceText);

		string GetMethodDeclaration()
		{
			if (dbContextSpec.OverridesOnModelCreating)
			{
				var declaration =
					"""
						private void ApplyEntityConfigurations(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder)
						{
					""";

				return declaration;
			}

			var overrideDeclaration =
				"""
					protected override void OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder)
					{
						base.OnModelCreating(modelBuilder);

				""";

			return overrideDeclaration;
		}

		string GetMethodClosure()
		{
			if (dbContextSpec.OverridesOnModelCreating)
			{
				var closure =
					"""
						}
					""";

				return closure;
			}

			var overrideClosure =
				"""

						OnModelCreatingPartial(modelBuilder);
					}

					partial void OnModelCreatingPartial(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder);
				""";

			return overrideClosure;
		}
	}

	private ConfigurationsFileInfo GenerateConfigurationsFile(in SourceProductionContext context, EntityConfigurationsSpec spec)
	{
		sb.Clear();

		var dbContextSpec = spec.DbContextSpec;

		var @namespace = Namespaces.Configurations;
		var className = $"{dbContextSpec.Name}Configurations";

		var configurations = spec.Configurations;

		var propertyNames = new List<string>(configurations.Count);

		var classDeclaration =
			$$"""
			// <auto-generated />
			#nullable enable
			
			namespace {{@namespace}};
			
			internal static class {{className}}
			{
			""";
		sb.AppendLine(classDeclaration);

		foreach (var configuration in spec.Configurations)
		{
			var propertyName = GetSingletonPropertyName(configuration);
			propertyNames.Add(propertyName);
			
			var singletonFieldDeclaration =
				$$"""
					internal static readonly {{configuration.FullyQualifiedName}} {{propertyName}} = new();
				""";
			sb.AppendLine(singletonFieldDeclaration);
		}

		var classClosure =
			"""
			}

			""";
		sb.AppendLine(classClosure);

		var hint = $"{className}.g.cs";
		var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);

		context.AddSource(hint, sourceText);

		return new ConfigurationsFileInfo(@namespace, className, propertyNames);
	}

	private string GetSingletonPropertyName(EntityConfigurationSpec spec) => $"{spec.Namespace.Replace('.', '_')}_{spec.Name}";

	#endregion

	#region Classes

	private sealed record ConfigurationsFileInfo(string ClassNamespace, string ClassName, List<string> PropertyNames);

	#endregion
}
