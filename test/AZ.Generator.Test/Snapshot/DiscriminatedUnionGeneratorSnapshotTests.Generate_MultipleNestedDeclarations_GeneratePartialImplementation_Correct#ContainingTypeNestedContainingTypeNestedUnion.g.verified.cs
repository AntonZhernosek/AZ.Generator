//HintName: ContainingTypeNestedContainingTypeNestedUnion.g.cs
// <auto-generated />
#nullable enable

// We cover all possible cases with switch
#pragma warning disable CS8509

namespace Foo.Bar.Baz;

partial class ContainingType
{
	partial class NestedContainingType
	{
		partial class NestedUnion
		{
			public TResult Match<TResult>(
		        System.Func<global::Foo.Bar.Baz.ContainingType.NestedContainingType.NestedImplementation, TResult> onNestedImplementation)
		    {
		        return this switch 
		        {    
		            global::Foo.Bar.Baz.ContainingType.NestedContainingType.NestedImplementation __NestedImplementation => onNestedImplementation(__NestedImplementation),
		        };
		    }
		
			public void Switch(
		        System.Action<global::Foo.Bar.Baz.ContainingType.NestedContainingType.NestedImplementation> onNestedImplementation)
		    {
		        switch (this)
		        {
		            case global::Foo.Bar.Baz.ContainingType.NestedContainingType.NestedImplementation __NestedImplementation:
		                onNestedImplementation(__NestedImplementation);
		                break;
		        }
		    }
		
			public bool IsNestedImplementation(
				[System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Foo.Bar.Baz.ContainingType.NestedContainingType.NestedImplementation implementation)
			{
				implementation = (global::Foo.Bar.Baz.ContainingType.NestedContainingType.NestedImplementation)this;
				return implementation is not null;
			}
		}
	}
}
