//HintName: ContainingTypeNestedUnion.g.cs
// <auto-generated />
#nullable enable

// We cover all possible cases with switch
#pragma warning disable CS8509

namespace Foo.Bar.Baz;

partial record ContainingType
{
	partial record NestedUnion
	{
		public TResult Match<TResult>(
	        System.Func<global::Foo.Bar.Baz.ContainingType.NestedImplementation, TResult> onNestedImplementation)
	    {
	        return this switch 
	        {    
	            global::Foo.Bar.Baz.ContainingType.NestedImplementation __NestedImplementation => onNestedImplementation(__NestedImplementation),
	        };
	    }
	
		public void Switch(
	        System.Action<global::Foo.Bar.Baz.ContainingType.NestedImplementation> onNestedImplementation)
	    {
	        switch (this)
	        {
	            case global::Foo.Bar.Baz.ContainingType.NestedImplementation __NestedImplementation:
	                onNestedImplementation(__NestedImplementation);
	                break;
	        }
	    }
	
		public bool IsNestedImplementation(
			[System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Foo.Bar.Baz.ContainingType.NestedImplementation implementation)
		{
			implementation = (global::Foo.Bar.Baz.ContainingType.NestedImplementation)this;
			return implementation is not null;
		}
	}
}
