//HintName: TestUnionExtensions.g.cs
// <auto-generated />
#nullable enable

// We cover all possible cases with switch
#pragma warning disable CS8509

namespace AZ.Generator.Functional.Extensions;

public static class TestUnionExtensions
{
	public static TResult Match<TResult>([System.Diagnostics.CodeAnalysis.DisallowNull] this global::Foo.Bar.Baz.TestUnion value,
        System.Func<global::Foo.Bar.Baz.TestImplementation1, TResult> myImplementationOne,
        System.Func<global::Foo.Bar.Baz.TestImplementation2, TResult> onTestImplementation2)
	{
		return value switch 
		{    
            global::Foo.Bar.Baz.TestImplementation1 __TestImplementation1 => myImplementationOne(__TestImplementation1),
            global::Foo.Bar.Baz.TestImplementation2 __TestImplementation2 => onTestImplementation2(__TestImplementation2),
        };
    }

    public static void Switch([System.Diagnostics.CodeAnalysis.DisallowNull] this global::Foo.Bar.Baz.TestUnion value,
        System.Action<global::Foo.Bar.Baz.TestImplementation1> myImplementationOne,
        System.Action<global::Foo.Bar.Baz.TestImplementation2> onTestImplementation2)
    {
        switch (value)
        {
            case global::Foo.Bar.Baz.TestImplementation1 __TestImplementation1:
                myImplementationOne(__TestImplementation1);
                break;

            case global::Foo.Bar.Baz.TestImplementation2 __TestImplementation2:
                onTestImplementation2(__TestImplementation2);
                break;
        }
    }

	public static bool IsMyImplementationOne([System.Diagnostics.CodeAnalysis.DisallowNull] this global::Foo.Bar.Baz.TestUnion value, 
		[System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Foo.Bar.Baz.TestImplementation1 implementation)
	{
		implementation = (global::Foo.Bar.Baz.TestImplementation1)value;
		return implementation is not null;
	}

	public static bool IsTestImplementation2([System.Diagnostics.CodeAnalysis.DisallowNull] this global::Foo.Bar.Baz.TestUnion value, 
		[System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Foo.Bar.Baz.TestImplementation2 implementation)
	{
		implementation = (global::Foo.Bar.Baz.TestImplementation2)value;
		return implementation is not null;
	}
}
